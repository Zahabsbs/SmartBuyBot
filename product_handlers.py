import logging
import json
import re
import asyncio
from typing import Dict, Any, Optional, Tuple

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from similar_products import find_similar_cheaper_products

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    import os
    from dotenv import load_dotenv
    load_dotenv()
    PARTNER_ID = os.getenv("PARTNER_ID", "wildberries")  # –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π ID
except ImportError:
    PARTNER_ID = "wildberries"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def handle_similar_cheaper_button(update: Update, context: ContextTypes.DEFAULT_TYPE, article: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–µ—à–µ–≤–ª–µ"
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        article: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    """
    query = update.callback_query
    await query.answer()
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
        await query.edit_message_text(
            f"üîç –ò—â—É –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–µ—à–µ–≤–ª–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {article}...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è similar_products –¥–ª—è –ø–æ–∏—Å–∫–∞
        similar_product = await find_similar_cheaper_products(
            article=article,
            min_rating=4.5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            min_feedbacks=20  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä
        if not similar_product:
            await query.edit_message_text(
                "–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (—Ä–µ–π—Ç–∏–Ω–≥ ‚â• 4.5, –æ—Ç–∑—ã–≤—ã ‚â• 20).",
                parse_mode=ParseMode.MARKDOWN
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        message_text = f"üì¶ *–ü–æ—Ö–æ–∂–∏–π —Ç–æ–≤–∞—Ä:* {similar_product.get('name')}\n"
        message_text += f"üí∞ *–¶–µ–Ω–∞:* {similar_product.get('price')} ‚ÇΩ\n"
        message_text += f"‚≠êÔ∏è *–†–µ–π—Ç–∏–Ω–≥:* {similar_product.get('rating')}\n"
        message_text += f"üí¨ *–û—Ç–∑—ã–≤—ã:* {similar_product.get('feedbacks')}\n"
        message_text += f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]({similar_product.get('url')})"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await query.edit_message_text(
            message_text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ—à–µ–≤–ª–µ: {str(e)}", exc_info=True)
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_article_request(update: Update, context: ContextTypes.DEFAULT_TYPE, article: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º —Ç–æ–≤–∞—Ä–∞
    
    Args:
        update: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        article: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        loading_message = await update.message.reply_text(
            f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ {article}..."
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ - —Ñ—É–Ω–∫—Ü–∏—è get_product_data –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ wb_bot.py
        from wb_bot import get_product_data
        product_data = await get_product_data(article)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        try:
            await loading_message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ product_data —Å–ª–æ–≤–∞—Ä–µ–º —Å –æ—à–∏–±–∫–æ–π
        if isinstance(product_data, dict) and 'error' in product_data:
            error_message = f"‚ö†Ô∏è {product_data['error']}"
            await update.message.reply_text(error_message)
            return
        
        # –ï—Å–ª–∏ product_data - –∫–æ—Ä—Ç–µ–∂ (name, price, details_json)
        if product_data and isinstance(product_data, tuple) and len(product_data) == 3:
            try:
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
                name, price, details_json = product_data
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
                message = f"üì¶ *–¢–æ–≤–∞—Ä:* {name}\n"
                
                if price:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ç–æ—á–∫–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
                    if price == int(price):
                        price_int = int(price)
                        if price_int >= 1000:
                            price_str = f"{price_int // 1000}.{price_int % 1000:03d}"
                        else:
                            price_str = str(price_int)
                        message += f"üí∞ *–¶–µ–Ω–∞:* {price_str} ‚ÇΩ\n"
                    else:
                        # –î–ª—è —Ü–µ–Ω—ã —Å –∫–æ–ø–µ–π–∫–∞–º–∏
                        price_int = int(price)
                        price_decimal = int((price - price_int) * 100)
                        if price_int >= 1000:
                            price_str = f"{price_int // 1000}.{price_int % 1000:03d}"
                            if price_decimal > 0:
                                price_str += f",{price_decimal:02d}"
                        else:
                            if price_decimal > 0:
                                price_str = f"{price_int},{price_decimal:02d}"
                            else:
                                price_str = str(price_int)
                        message += f"üí∞ *–¶–µ–Ω–∞:* {price_str} ‚ÇΩ\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if details_json:
                    try:
                        details = json.loads(details_json)
                        
                        if 'rating' in details and details['rating']:
                            rating = details['rating']
                            rating_str = f"{rating:.1f}"
                            
                            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∑–æ–ª–æ—Ç—ã—Ö –∑–≤—ë–∑–¥
                            full_stars = min(5, int(rating))
                            half_star = rating - int(rating) >= 0.5
                            empty_stars = 5 - full_stars - (1 if half_star else 0)
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –∑–≤–µ–∑–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            # ‚òÖ - –∑–æ–ª–æ—Ç–∞—è –∑–≤–µ–∑–¥–∞ (–ø–æ–ª–Ω–∞—è)
                            # ‚ú≠ - –ø–æ–ª—É–∑–≤–µ–∑–¥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª)
                            # ‚òÜ - –ø—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞
                            star_rating = '‚òÖ' * full_stars
                            if half_star:
                                star_rating += '‚ú≠'
                            star_rating += '‚òÜ' * empty_stars
                            
                            message += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {rating_str} {star_rating}\n"
                            
                        if 'brand' in details and details['brand']:
                            message += f"üè≠ *–ë—Ä–µ–Ω–¥:* {details['brand']}\n"
                            
                        if 'seller' in details and details['seller']:
                            message += f"üè™ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* {details['seller']}\n"
                            
                        if 'feedbacks' in details or 'reviews_count' in details:
                            reviews_count = details.get('feedbacks', details.get('reviews_count', 0))
                            message += f"üí¨ *–û—Ç–∑—ã–≤—ã:* {reviews_count}\n"
                        
                    except json.JSONDecodeError:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON —Å –¥–µ—Ç–∞–ª—è–º–∏: {details_json}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
                partner_link = f"https://www.wildberries.ru/catalog/{article}/detail.aspx?target=partner&partner={PARTNER_ID}"
                message += f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]({partner_link})"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ—à–µ–≤–ª–µ
                keyboard = [
                    [InlineKeyboardButton("–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–µ—à–µ–≤–ª–µ", callback_data=f"similar_cheaper_{article}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏ –∫–Ω–æ–ø–∫–æ–π
                await update.message.reply_text(
                    message, 
                    parse_mode=ParseMode.MARKDOWN, 
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ: {e}", exc_info=True)
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
            error_message = "‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Wildberries."
            await update.message.reply_text(error_message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}: {e}", exc_info=True)
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def extract_article_from_url(url: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–∑ URL Wildberries
    
    Args:
        url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        str: –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    """
    patterns = [
        r'wildberries\.ru/catalog/(\d+)/',  # –û–±—ã—á–Ω—ã–π URL —Ç–æ–≤–∞—Ä–∞
        r'wb\.ru/catalog/(\d+)/',           # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π URL
        r'wildberries\.ru/product\?card=(\d+)',  # URL —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        r'card=(\d+)'                       # URL —Å card parameter
    ]
    
    for pattern in patterns:
        match = re.search(pattern, url)
        if match:
            return match.group(1)
    
    return None 